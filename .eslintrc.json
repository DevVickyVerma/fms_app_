{
  "globals": {
    "define": "readonly" // Declare `define` as a global variable
  },
    "extends": ["react-app", "react-app/jest"],
    "rules": {
      // "eqeqeq": "off", // Enforce the use of strict equality (===) and inequality (!==) instead of loose equality (== and !=).
      
      // "no-useless-escape": "off" // warn when there are unnecessary escape characters in strings or regular expressions.
      
  //     "react-hooks/exhaustive-deps": "warn", // warn if dependencies are missing or incorrect in React hooks like useEffect.
      
      // "no-unused-vars": "warn" // warn when variables are declared but never used in the code.
      
  //     "no-undef": "warn", // warn when referencing a variable that has not been defined.
      
  //     "prefer-const": "warn", // warn when a variable is not reassigned but declared using 'let' instead of 'const'. Prefer 'const' for variables that don't change.
      
  //     "no-sequences": "warn", // warn when the comma operator is used in expressions where it might lead to confusing code.
      
  //   //   "semi": ["warn", "always"], // Enforce the use of semicolons (;) at the end of every statement.
      
  //   //   "quotes": ["warn", "single"], // Enforce the consistent use of single quotes (') for strings.






   // React specific rules
   "react/prop-types": "off", // Enforce defining propTypes for better type-checking in React components
   "react/jsx-no-duplicate-props": "warn", // Prevent defining duplicate props in JSX
   "react/jsx-no-undef": "warn", // Disallow the use of undefined variables in JSX
   "react/jsx-key": "warn", // Ensure proper usage of 'key' prop in lists
   "react/jsx-boolean-value": ["warn", "always"], // Always explicitly pass boolean values (e.g., `prop={true}` instead of `prop`)
   "react/no-array-index-key": "warn", // Warn when using array index as key in lists (use unique IDs instead for stable keys)
   "react/no-danger": "warn", // Prevent the use of `dangerouslySetInnerHTML` to avoid potential security risks
   "react/no-direct-mutation-state": "warn", // Prevent directly mutating `this.state`, which can cause unexpected behavior
   "react/no-access-state-in-setstate": "warn", // Prevent accessing `this.state` directly in `setState` as it can lead to bugs
   "react/no-unused-state": "warn", // Warn if there are state properties that are defined but not used in the component
   "react/jsx-no-comment-textnodes": "warn", // Prevent comments from being placed as text nodes in JSX
   "react/self-closing-comp": "warn", // Enforce self-closing tags for components that donâ€™t have children (e.g., `<div />`)
   "react/jsx-pascal-case": "warn", // Enforce PascalCase for user-defined JSX components
   "react/no-redundant-should-component-update": "warn", // Prevent unnecessary usage of `shouldComponentUpdate` when extending React.PureComponent
   "react/jsx-fragments": ["warn", "syntax"], // Enforce using `<>` shorthand for React fragments
   "react/no-multi-comp": ["warn", { "ignoreStateless": true }], // Warn if multiple components are declared in one file (encourages single responsibility principle)
   

  //   // JSX accessibility rules (optional, but helpful for accessibility)
  //   "jsx-a11y/alt-text": "warn", // Warn if images, buttons, etc., are missing alt text (for accessibility)
    "jsx-a11y/anchor-is-valid": "warn" // Warn if `a` tags are missing `href` or have invalid `href` values
    // "jsx-a11y/no-autofocus": "warn" // Warn if autoFocus is used in JSX (can harm accessibility)
    // "jsx-a11y/label-has-associated-control": "warn" // Ensure all form labels are properly associated with input fields
 


    }
  }
  